# This is a Spack Environment file.
#
# It describes a set of packages to be installed, along with
# configuration settings.
spack:
  view: false
  concretizer:
    unify: false
    reuse:
      roots: true
      from:
      - type: local
        include:
        - "%gcc@11.5.0"

  compilers:
  - compiler:
      spec: gcc@=11.5.0
      operating_system: rocky9
      target: x86_64
      paths:
        cc: /scinet/spack/compilers/core-gcc-11.5.0/bin/core-gcc
        cxx: /scinet/spack/compilers/core-gcc-11.5.0/bin/core-g++
        f77: /scinet/spack/compilers/core-gcc-11.5.0/bin/core-gfortran
        fc: /scinet/spack/compilers/core-gcc-11.5.0/bin/core-gfortran
      extra_rpaths:
      - /scinet/spack/compilers/core-gcc-11.5.0/lib64
      modules: []

  # note: don't use 'prefer', that's how we enable cuda in create-env.sh
  packages:
    all:
      target: [x86_64_v4]
      providers:
        blas: [amdblis, openblas]
        lapack: [amdlibflame, openblas]
        flame: [amdlibflame, libflame]
        fftw-api: [amdfftw, fftw]
        scalapack: [amdscalapack, netlib-scalapack]
        mpi: [openmpi, mvapich]
    amd-aocl:
      require: +openmp
    amdblis:
      require: threads=openmp
    amdlibflame:
      require: threads=openmp
    amdfftw:
      require: +openmp
    aocc:
      variants: +license-agreed
    cuda:
      version: [ '12.8' ]
    fftw:
      variants: +openmp
    gromacs:
      require: ~mpi +openmp
    hdf5:
      variants: +cxx +fortran +hl +szip
    hpl:
      require: +openmp
    lammps:
      # '+amoeba ...' list from cmake/presets/most.cmake (2025-04-17)
      variants: +exceptions +intel +openmp-package +amoeba +asphere +bocs +body +bpm +brownian +cg-dna +cg-spica +class2 +colloid +colvars +compress +coreshell +dielectric +diffraction +dipole +dpd-basic +dpd-meso +dpd-react +dpd-smooth +drude +eff +electrode +extra-command +extra-compute +extra-dump +extra-fix +extra-molecule +extra-pair +fep +granular +interlayer +kspace +lepton +machdyn +manybody +mc +meam +mesont +misc +ml-iap +ml-pod +ml-snap +ml-uf3 +mofff +molecule +openmp +opt +orient +peri +phonon +plugin +poems +qeq +reaction +reaxff +replica +rheo +rigid +shock +sph +spin +srd +tally +uef +voronoi +yaff
    mvapich:
      require: netmod=ucx pmi_version=pmix process_managers=slurm
    mvapich-plus:
      require: netmod=ucx pmi_version=pmix process_managers=slurm
    openblas:
      variants: threads=openmp
    openmpi:
      require: fabrics=cma,hcoll,ucc,ucx +openshmem schedulers=slurm
    python:
      # spack likes to install random versions of python deps
      version: [ '3.11' ]
    py-torch:
      require: ~mkldnn
    stream:
      # stream_array_size is for 768M L3 cache (dual-socket EPYC 9655/9654)
      # https://www.amd.com/en/developer/zen-software-studio/applications/spack/stream-benchmark.html
      require: ntimes=100 +openmp stream_array_size=430080000 stream_type=double
    quantum-espresso:
      require: +elpa +libxc +openmp
    wrf:
      variants: build_type=dm+sm

    # hpcx
    # https://github.com/spack/spack/issues/49892
    hcoll:
      buildable: false
      externals:
      - spec: hcoll@4.8.3230
        prefix: /scinet/nvidia/hpcx/v2.21-LTS/hcoll
    ucc:
      buildable: false
      externals:
      - spec: ucc@1.4.0
        prefix: /scinet/nvidia/hpcx/v2.21-LTS/ucc
    ucx:
      require: "@1.18 +cma +dc +dm +ib_hw_tm +knem +mlx5_dv +parameter_checking +rc +rdmacm +thread_multiple +ud +verbs"
    knem:
      buildable: false
      externals:
      - spec: knem@1.1.4
        prefix: /opt/knem-1.1.4.90mlnx3
    rdma-core:
      buildable: false
      externals:
      - spec: rdma-core@54.0
        prefix: /usr

  modules:
    default:
      arch_folder: false
      'enable:':
      - lmod
      roots:
        lmod: modules
      lmod:
        core_compilers:
        - gcc@11.5.0
        exclude:
        - gcc-runtime
        - glibc
        - lmod
        hash_length: 0
        hide_implicits: true
        hierarchy:
        - mpi
        projections:
          all: '{name}/{version}'
          hpl^blas: '{name}/{version}-{^blas.name}-{^blas.version}'
        all:
          autoload: direct
          environment:
            set:
              MODULE_{name}_ROOT: '{prefix}'
    prefix_inspections:
      ./include:
      - CPATH
      ./lib:
      - LIBRARY_PATH
      - LD_LIBRARY_PATH
      ./lib64:
      - LIBRARY_PATH
      - LD_LIBRARY_PATH

  specs:
  - cmake
  - lmod
  - ninja
  - python

